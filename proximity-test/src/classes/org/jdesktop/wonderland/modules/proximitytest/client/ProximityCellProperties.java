/**
 * Project Wonderland
 *
 * Copyright (c) 2004-2009, Sun Microsystems, Inc., All Rights Reserved
 *
 * Redistributions in source code form must reproduce the above
 * copyright and this condition.
 *
 * The contents of this file are subject to the GNU General Public
 * License, Version 2 (the "License"); you may not use this file
 * except in compliance with the License. A copy of the License is
 * available at http://www.opensource.org/licenses/gpl-license.php.
 *
 * Sun designates this particular file as subject to the "Classpath"
 * exception as provided by Sun in the License file that accompanied
 * this code.
 */
package org.jdesktop.wonderland.modules.proximitytest.client;

import java.util.Arrays;
import java.util.Collections;
import java.util.ResourceBundle;
import java.util.logging.Logger;
import javax.swing.JPanel;
import org.jdesktop.wonderland.client.cell.properties.annotation.PropertiesFactory;
import org.jdesktop.wonderland.client.cell.properties.spi.PropertiesFactorySPI;
import org.jdesktop.wonderland.client.cell.properties.CellPropertiesEditor;
import org.jdesktop.wonderland.common.cell.state.CellServerState;
import org.jdesktop.wonderland.modules.proximitytest.common.ProximityCellServerState;

/**
 * Property sheet for proximity test
 * @author Jonathan Kaplan <kaplanj@dev.java.net>
 */
@PropertiesFactory(ProximityCellServerState.class)
public class ProximityCellProperties
        extends JPanel implements PropertiesFactorySPI {
    
    public static String type;

    private static final ResourceBundle BUNDLE = ResourceBundle.getBundle(
            "org/jdesktop/wonderland/modules/proximitytest/client/resources/Bundle");

    private static final Logger LOGGER =
            Logger.getLogger(ProximityCellProperties.class.getName());
    CellPropertiesEditor editor = null;

    private boolean origClient;
    private boolean origServer;
    private int radius;
    
   
    

    /** Creates new form SampleCellProperties */
    public ProximityCellProperties() {
        initComponents();
    }

    /**
     * @inheritDoc()
     */
    public String getDisplayName() {
        return BUNDLE.getString("Proximity_Cell");
    }

    /**
     * @inheritDoc()
     */
    public JPanel getPropertiesJPanel() {
        return this;
    }

    /**
     * @inheritDoc()
     */
    public void setCellPropertiesEditor(CellPropertiesEditor editor) {
        this.editor = editor;
    }

    /**
     * @inheritDoc()
     */
    public void open() {
        // Fetch the current state from the cell's server state and update
        // the GUI.
        CellServerState state = editor.getCellServerState();
        if (state != null) {
            ProximityCellServerState pcss = (ProximityCellServerState) state;
            origClient = (pcss.getClientBounds() != null) &&
                         (pcss.getClientBounds().size() > 0);
            origServer = (pcss.getServerBounds() != null) &&
                         (pcss.getServerBounds().size() > 0);

            restore();
        }
    }

    /**
     * @inheritDoc()
     */
    public void close() {
        // Do nothing for now.
    }

    /**
     * @inheritDoc()
     */
    public void restore() {
        clientCB.setSelected(origClient);
        serverCB.setSelected(origServer);
    }

    /**
     * @inheritDoc()
     */
    public void apply() {
        // Take the value from the shape type and populate the server state
        // with it.
        ProximityCellServerState state = (ProximityCellServerState) editor.getCellServerState();
        ProximityCellFactory pcf = new ProximityCellFactory();
       // ProximityCell pc = new ProximityCell(null,null);
        if (clientCB.isSelected()) {
            state.setClientBounds(Arrays.asList(ProximityCellFactory.clientBV));
        } else {
            state.setClientBounds(Collections.EMPTY_LIST);
        }

        if (serverCB.isSelected()) {
            String r = Radius.getText();
            type = TypeofCell.getText();
            //pc.setType(type);
            float rad = Float.parseFloat(r);
            pcf.setserverbounds(rad);
            state.setServerBounds(Arrays.asList(ProximityCellFactory.serverBV));
        } else {
            state.setServerBounds(Collections.EMPTY_LIST);
        }
        
        
        
        editor.addToUpdateList(state);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        serverCB = new javax.swing.JCheckBox();
        clientCB = new javax.swing.JCheckBox();
        Radius = new javax.swing.JTextField();
        TypeofCell = new javax.swing.JTextField();

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("org/jdesktop/wonderland/modules/proximitytest/client/resources/Bundle"); // NOI18N
        jTextField1.setText(bundle.getString("ProximityCellProperties.jTextField1.text")); // NOI18N

        serverCB.setText(bundle.getString("ProximityCellProperties.serverCB.text")); // NOI18N
        serverCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                serverCBActionPerformed(evt);
            }
        });

        clientCB.setText(bundle.getString("ProximityCellProperties.clientCB.text")); // NOI18N
        clientCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clientCBActionPerformed(evt);
            }
        });

        Radius.setText(bundle.getString("ProximityCellProperties.Radius.text")); // NOI18N
        Radius.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RadiusActionPerformed(evt);
            }
        });
        Radius.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                RadiusKeyPressed(evt);
            }
        });

        TypeofCell.setText(bundle.getString("ProximityCellProperties.TypeofCell.text")); // NOI18N

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(serverCB)
                    .add(clientCB)
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                        .add(org.jdesktop.layout.GroupLayout.LEADING, TypeofCell)
                        .add(org.jdesktop.layout.GroupLayout.LEADING, Radius, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 74, Short.MAX_VALUE)))
                .addContainerGap(319, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(serverCB)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(clientCB)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(Radius, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(TypeofCell, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(59, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void serverCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_serverCBActionPerformed
        checkDirty();
    }//GEN-LAST:event_serverCBActionPerformed

    private void clientCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clientCBActionPerformed
        checkDirty();
    }//GEN-LAST:event_clientCBActionPerformed

    private void RadiusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RadiusActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_RadiusActionPerformed

    private void RadiusKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_RadiusKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_RadiusKeyPressed

   
    private void checkDirty() {
        boolean dirty = (clientCB.isSelected() != origClient) ||
                        (serverCB.isSelected() != origServer);
        editor.setPanelDirty(ProximityCellProperties.class, dirty);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField Radius;
    private javax.swing.JTextField TypeofCell;
    private javax.swing.JCheckBox clientCB;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JCheckBox serverCB;
    // End of variables declaration//GEN-END:variables

}
